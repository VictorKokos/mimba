{"ast":null,"code":"let ADD_MESSAGE = 'ADD_MESSAGE';\nlet CHANGE_NEW_MESSAGE = 'CHANGE_NEW_MESSAGE';\nexport let addMessage = text => ({\n  type: ADD_MESSAGE,\n  message: text\n});\nexport let changeNewMessage = text => ({\n  type: CHANGE_NEW_MESSAGE,\n  textFromTextarea: text\n});\nlet initialState = {\n  Messages: [],\n  NewMessage: {\n    text: \"\"\n  }\n};\nlet messageCount = 0;\n\nlet MessengerSupportReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_MESSAGE:\n      {\n        messageCount++;\n        let newMessage = {\n          id: messageCount,\n          message: action.message\n        };\n        return { ...state,\n          Messages: [...state.Messages, newMessage],\n          //Вместо push\n          NewMessage: { ...state.NewMessage,\n            text: \"\"\n          }\n        };\n      }\n\n    case CHANGE_NEW_MESSAGE:\n      {\n        return { ...state,\n          NewMessage: { ...state.NewMessage,\n            text: action.textFromTextarea\n          }\n        };\n      }\n\n    default:\n      return initialState;\n  }\n};\n\n_c = MessengerSupportReducer;\nexport default MessengerSupportReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MessengerSupportReducer\");","map":{"version":3,"names":["ADD_MESSAGE","CHANGE_NEW_MESSAGE","addMessage","text","type","message","changeNewMessage","textFromTextarea","initialState","Messages","NewMessage","messageCount","MessengerSupportReducer","state","action","newMessage","id"],"sources":["D:/Work/ReactJS/mimba/src/Redux/MessengerSupportReducer.js"],"sourcesContent":["let ADD_MESSAGE = 'ADD_MESSAGE';\r\nlet CHANGE_NEW_MESSAGE = 'CHANGE_NEW_MESSAGE';\r\n\r\n\r\nexport let addMessage = (text) =>({\r\n    type:ADD_MESSAGE,\r\n     message:text \r\n  })\r\n  export let changeNewMessage = (text) =>\r\n  ({\r\n  \r\n    type:CHANGE_NEW_MESSAGE,\r\n     textFromTextarea:text\r\n  \r\n  })\r\n\r\n  let initialState =\r\n{\r\n        Messages:\r\n        [\r\n          \r\n        ],\r\n        NewMessage:{text:\"\"}\r\n}\r\n  \r\n\r\nlet messageCount = 0;\r\nlet MessengerSupportReducer = (state = initialState, action) =>\r\n{\r\nswitch(action.type)\r\n{\r\n  case ADD_MESSAGE :\r\n  {\r\n    messageCount++;\r\n    let newMessage =\r\n      {\r\n        id:messageCount, message:action.message\r\n      }\r\n     return{\r\n      ...state,\r\n      Messages : [...state.Messages, newMessage], //Вместо push\r\n      NewMessage:{\r\n        ...state.NewMessage,\r\n        text : \"\"\r\n      }\r\n    }\r\n  \r\n  }\r\n  case CHANGE_NEW_MESSAGE:\r\n  {\r\n    return {\r\n      ...state,\r\n      NewMessage : \r\n      {\r\n        ...state.NewMessage,\r\n        text : action.textFromTextarea\r\n      }\r\n    }\r\n  }\r\n  default: return initialState\r\n}\r\n}\r\nexport default MessengerSupportReducer"],"mappings":"AAAA,IAAIA,WAAW,GAAG,aAAlB;AACA,IAAIC,kBAAkB,GAAG,oBAAzB;AAGA,OAAO,IAAIC,UAAU,GAAIC,IAAD,KAAU;EAC9BC,IAAI,EAACJ,WADyB;EAE7BK,OAAO,EAACF;AAFqB,CAAV,CAAjB;AAIL,OAAO,IAAIG,gBAAgB,GAAIH,IAAD,KAC7B;EAECC,IAAI,EAACH,kBAFN;EAGEM,gBAAgB,EAACJ;AAHnB,CAD6B,CAAvB;AAQP,IAAIK,YAAY,GAClB;EACQC,QAAQ,EACR,EAFR;EAKQC,UAAU,EAAC;IAACP,IAAI,EAAC;EAAN;AALnB,CADE;AAUF,IAAIQ,YAAY,GAAG,CAAnB;;AACA,IAAIC,uBAAuB,GAAG,YAC9B;EAAA,IAD+BC,KAC/B,uEADuCL,YACvC;EAAA,IADqDM,MACrD;;EACA,QAAOA,MAAM,CAACV,IAAd;IAEE,KAAKJ,WAAL;MACA;QACEW,YAAY;QACZ,IAAII,UAAU,GACZ;UACEC,EAAE,EAACL,YADL;UACmBN,OAAO,EAACS,MAAM,CAACT;QADlC,CADF;QAIC,OAAM,EACL,GAAGQ,KADE;UAELJ,QAAQ,EAAG,CAAC,GAAGI,KAAK,CAACJ,QAAV,EAAoBM,UAApB,CAFN;UAEuC;UAC5CL,UAAU,EAAC,EACT,GAAGG,KAAK,CAACH,UADA;YAETP,IAAI,EAAG;UAFE;QAHN,CAAN;MASF;;IACD,KAAKF,kBAAL;MACA;QACE,OAAO,EACL,GAAGY,KADE;UAELH,UAAU,EACV,EACE,GAAGG,KAAK,CAACH,UADX;YAEEP,IAAI,EAAGW,MAAM,CAACP;UAFhB;QAHK,CAAP;MAQD;;IACD;MAAS,OAAOC,YAAP;EA9BX;AAgCC,CAlCD;;KAAII,uB;AAmCJ,eAAeA,uBAAf"},"metadata":{},"sourceType":"module"}